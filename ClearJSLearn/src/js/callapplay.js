'use strict';

console.log('Advanced work with functions üõ†');
console.log('call && applay üéüüé´');

// let work = (a, b) => {
//   alert( a + b ); // –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–ª–∏ –º–µ—Ç–æ–¥
// };

// function spy(func) {
//   const calls = [];
//   return function f() {
//     f.calls = calls;
//     calls.push([...arguments]);
//     const result = func.call(this, ...arguments);
//     return result;
//   };
// }

// function spy(func) {
//   function f(...args) {
//     f.calls.push(args);
//     return func.call(this, arguments);
//   }
//   f.calls = [];
//   return f;
// }

// work = spy(work);

// work(1, 2); // 3
// work(4, 5); // 9

// for (const args of work.calls) {
//   console.log( `call:${args.join()}` ); // "call:1,2", "call:4,5"
// }

/**
 *
 */
// function f(x, y) {
//   console.log(x, y);
// }

// function delay(f, ms) {
//   function func() {
//     // setTimeout(() => f.call(this, ...arguments), ms);
//     setTimeout(() => f.apply(this, arguments), ms);
//   }
//   return func;
// }

// // —Å–æ–∑–¥–∞—ë–º –æ–±—ë—Ä—Ç–∫–∏
// const f1000 = delay(f, 1000);
// const f1500 = delay(f, 1500);

// f1000('test', Math.random()); // –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç "test" –ø–æ—Å–ª–µ 1000 –º—Å
// f1500('test', Math.random()); // –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç "test" –ø–æ—Å–ª–µ 1500 –º—Å

/**
 *
 */
// function debounce(f, ms) {
//   let locked = false;
//   return function () {
//     if (locked) return;
//     locked = true;
//     f.apply(this, arguments);
//     setTimeout(() => locked = false, ms);
//   };
// }
// const f = debounce(console.log, 1000);
// f(1); // –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
// f(2); // –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω
// setTimeout( () => f(3), 100); // –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω (–ø—Ä–æ—à–ª–æ —Ç–æ–ª—å–∫–æ 100 –º—Å)
// setTimeout( () => f(4), 1100); // –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è
// setTimeout( () => f(5), 1500); // –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω (–ø—Ä–æ—à

/**
 *
 */
// function f(a) {
//   console.log(a);
// }

// function throttle(f, ms) {
//   let locked = false;
//   let seveArgs;
//   let saveThis;

//   function func() {
//     if (locked) {
//       seveArgs = arguments;
//       saveThis = this;
//       return;
//     }

//     locked = true;
//     f.apply(this, arguments);
//     setTimeout(() => {
//       locked = false;
//       if (seveArgs) {
//         f.apply(saveThis, seveArgs);
//         seveArgs = saveThis = null;
//       }
//     }, ms);
//   }
//   return func;
// }

// // f1000 –ø–µ—Ä–µ–¥–∞—ë—Ç –≤—ã–∑–æ–≤—ã f –º–∞–∫—Å–∏–º—É–º —Ä–∞–∑ –≤ 1000 –º—Å
// const f1000 = throttle(f, 1000);

// f1000(1); // –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç 1
// f1000(2); // (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, 1000 –º—Å –µ—â—ë –Ω–µ—Ç)
// f1000(3); // (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, 1000 –º—Å –µ—â—ë –Ω–µ—Ç)
// // –∫–æ–≥–¥–∞ 1000 –º—Å –∏—Å—Ç–µ–∫–ª–∏ ...
// // ...–≤—ã–≤–æ–¥–∏–º 3, –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ 2 –±—ã–ª–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ
